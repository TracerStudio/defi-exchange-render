const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const app = express();

// Telegram Bot Token (–∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω)
const BOT_TOKEN = process.env.BOT_TOKEN || '7769270215:AAH_R-Q14oxkKHU0a53xK4_evXWiQJBiO54'; // ID –∞–¥–º—ñ–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || '-1002573326301'; // –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

// –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

console.log(`ü§ñ Telegram Bot initialized`);
console.log(`üì± Admin Chat ID: ${ADMIN_CHAT_ID}`);
console.log(`üîë Bot Token: ${BOT_TOKEN.substring(0, 10)}...`);

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫–∏
let withdrawalRequests = new Map();
let requestCounter = 1;

// Fun usernames for each request
const funUsernames = [
  "CryptoWhale", "DeFiDragon", "BlockchainBoss", "TokenTrader", "SwapMaster",
  "DiamondHands", "MoonRocket", "CryptoKing", "EthereumEagle", "BitcoinBull",
  "DeFiNinja", "TokenTitan", "SwapSage", "CryptoCrusader", "BlockchainBeast",
  "DiamondDuke", "MoonMaven", "CryptoChampion", "EthereumElite", "BitcoinBaron",
  "DeFiDynamo", "TokenTiger", "SwapSorcerer", "CryptoCaptain", "BlockchainBrawler",
  "DiamondDynamo", "MoonMage", "CryptoCommander", "EthereumEmperor", "BitcoinBishop",
  "DeFiDuke", "TokenTornado", "SwapSamurai", "CryptoCzar", "BlockchainBaron",
  "DiamondDragon", "MoonMystic", "CryptoCrown", "EthereumEagle", "BitcoinBaller",
  "DeFiDaredevil", "TokenTitan", "SwapSultan", "CryptoCrusader", "BlockchainBoss"
];

// Function to get random fun username
const getRandomUsername = () => {
  return funUsernames[Math.floor(Math.random() * funUsernames.length)];
};

// Function to update withdrawal status in database
const updateWithdrawalStatusInDatabase = async (requestId, status, userAddress) => {
  try {
    console.log(`Updating withdrawal ${requestId} status to ${status} in database`);
    
    const fs = require('fs');
    const path = require('path');
    
    // Update the main withdrawal requests file
    const requestsFile = path.join(__dirname, '..', 'database', `withdrawal_requests_${userAddress}.json`);
    let requests = [];
    
    try {
      if (fs.existsSync(requestsFile)) {
        const data = fs.readFileSync(requestsFile, 'utf8');
        requests = JSON.parse(data);
      }
    } catch (e) {
      console.log('Creating new withdrawal requests file');
    }
    
    // Find the request
    const requestIndex = requests.findIndex(req => req.id === requestId);
    if (requestIndex !== -1) {
      if (status === 'approved') {
        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        requests.splice(requestIndex, 1);
        console.log(`‚úÖ Approved and removed withdrawal request ${requestId} from database`);
      } else if (status === 'rejected') {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        requests[requestIndex].status = status;
        requests[requestIndex].updatedAt = new Date().toISOString();
        console.log(`‚úÖ Updated withdrawal request ${requestId} status to ${status} in database`);
      }
      
      // Save updated requests
      fs.writeFileSync(requestsFile, JSON.stringify(requests, null, 2));
    } else {
      console.log(`‚ö†Ô∏è Request ${requestId} not found in database`);
    }
    
  } catch (error) {
    console.error('‚ùå Error updating withdrawal status in database:', error);
  }
};

// Function to save withdrawal request to database
const saveWithdrawalRequestToDatabase = async (request) => {
  try {
    const fs = require('fs');
    const path = require('path');
    
    // Path to user's withdrawal requests file
    const requestsFile = path.join(__dirname, '..', 'database', `withdrawal_requests_${request.userAddress}.json`);
    let requests = [];
    
    try {
      if (fs.existsSync(requestsFile)) {
        const data = fs.readFileSync(requestsFile, 'utf8');
        requests = JSON.parse(data);
      }
    } catch (e) {
      console.log('Creating new withdrawal requests file for user:', request.userAddress);
    }
    
    // Add new request
    requests.push(request);
    
    // Save updated requests
    fs.writeFileSync(requestsFile, JSON.stringify(requests, null, 2));
    console.log(`‚úÖ Saved withdrawal request ${request.id} to database for user ${request.userAddress}`);
    
  } catch (error) {
    console.error('‚ùå Error saving withdrawal request to database:', error);
  }
};

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É JSON
app.use(express.json());

// CORS middleware
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const updateUserBalances = async (userAddress, token, amount) => {
  try {
    const fs = require('fs');
    const path = require('path');
    
    // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–ª–∞–Ω—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const balancesFile = path.join(__dirname, '..', 'database', `user_balances_${userAddress}.json`);
    
    // –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    let userBalances = {};
    if (fs.existsSync(balancesFile)) {
      const data = fs.readFileSync(balancesFile, 'utf8');
      userBalances = JSON.parse(data);
    }
    
    // –ó–º–µ–Ω—à—É—î–º–æ –±–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–≤–æ–¥—É
    const currentBalance = parseFloat(userBalances[token] || 0);
    const withdrawAmount = parseFloat(amount);
    const newBalance = Math.max(0, currentBalance - withdrawAmount);
    
    userBalances[token] = newBalance;
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    fs.writeFileSync(balancesFile, JSON.stringify(userBalances, null, 2));
    
    console.log(`‚úÖ Updated balances for user ${userAddress}:`);
    console.log(`   ${token}: ${currentBalance} ‚Üí ${newBalance} (-${withdrawAmount})`);
    
    // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –±–∞–ª–∞–Ω—Å—ñ–≤
    const generalBalancesFile = path.join(__dirname, '..', 'database', 'user_balances.json');
    let generalBalances = {};
    
    if (fs.existsSync(generalBalancesFile)) {
      const data = fs.readFileSync(generalBalancesFile, 'utf8');
      generalBalances = JSON.parse(data);
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    if (!generalBalances[userAddress]) {
      generalBalances[userAddress] = {};
    }
    generalBalances[userAddress][token] = newBalance;
    
    fs.writeFileSync(generalBalancesFile, JSON.stringify(generalBalances, null, 2));
    
    console.log(`üíæ Balances saved to database files`);
    
  } catch (error) {
    console.error('‚ùå Error updating user balances:', error);
  }
};

// –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤—ñ–¥
app.post('/withdrawal-request', async (req, res) => {
  try {
    const { token, amount, address, userAddress } = req.body;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –∑ –ø—Ä–∏–∫–æ–ª—å–Ω–∏–º –±–∑–µ—Ä–Ω–µ–π–º–æ–º
    const requestId = `WR-${Date.now()}-${requestCounter++}`;
    const funUsername = getRandomUsername();
    const request = {
      id: requestId,
      token,
      amount,
      address,
      userAddress,
      funUsername,
      status: 'pending',
      timestamp: new Date().toISOString(),
      createdAt: new Date().toISOString()
    };
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –≤ –ø–∞–º'—è—Ç—ñ
    withdrawalRequests.set(requestId, request);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    await saveWithdrawalRequestToDatabase(request);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –∑ –ø—Ä–∏–∫–æ–ª—å–Ω–∏–º —Å—Ç–∏–ª–µ–º
    const message = `
üî• *NEW WITHDRAWAL REQUEST* üî•

üéØ *Request ID:* \`${requestId}\`
üí∞ *Token:* ${token}
üíé *Amount:* ${amount}

üè¶ *CRYPTO ADDRESS:*
\`${address}\`

üëë *User:* ${funUsername}
‚è∞ *Time:* ${new Date().toLocaleString('en-US')}

üöÄ *Ready to process this withdrawal?*
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ APPROVE WITHDRAWAL',
            callback_data: `approve_${requestId}`
          },
          {
            text: '‚ùå REJECT REQUEST',
            callback_data: `reject_${requestId}`
          }
        ]
      ]
    };
    
    try {
      await bot.sendMessage(ADMIN_CHAT_ID, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
      console.log(`‚úÖ Withdrawal request sent to Telegram: ${requestId}`);
    } catch (error) {
      console.error(`‚ùå Error sending to Telegram: ${error.message}`);
      console.log(`üìù Request saved to database but not sent to Telegram: ${requestId}`);
      // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å, –∑–∞–ø–∏—Ç –≤—Å–µ –æ–¥–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –±–∞–∑—ñ
    }
    
    res.json({ success: true, requestId });
    
  } catch (error) {
    console.error('Error processing withdrawal request:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  
  if (data.startsWith('approve_')) {
    const requestId = data.replace('approve_', '');
    const request = withdrawalRequests.get(requestId);
    
    if (request) {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      request.status = 'approved';
      withdrawalRequests.set(requestId, request);
      
      // Update database for frontend
      await updateWithdrawalStatusInDatabase(requestId, 'approved', request.userAddress);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚úÖ WITHDRAWAL APPROVED! Funds are being processed.',
        show_alert: true
      });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const updatedMessage = `
üéâ *WITHDRAWAL APPROVED* üéâ

üéØ *Request ID:* \`${requestId}\`
üí∞ *Token:* ${request.token}
üíé *Amount:* ${request.amount}


üè¶ *CRYPTO ADDRESS:*
\`${request.address}\`


üëë *User:* ${request.funUsername}
‚è∞ *Approved At:* ${new Date().toLocaleString('en-US')}

*Status:* ‚úÖ APPROVED & PROCESSED
      `;
      
      await bot.editMessageText(updatedMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });
      
         // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
         try {
           await updateUserBalances(request.userAddress, request.token, request.amount);
           
           console.log(`‚úÖ Withdrawal approved: ${requestId}`);
           console.log(`üí∞ User ${request.userAddress} balance updated: -${request.amount} ${request.token}`);
           console.log(`üìç User should receive ${request.amount} ${request.token} to ${request.address}`);
         
         // –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω–∞:
         console.log(`
         ========================================
         üö® ADMIN INSTRUCTIONS:
         ========================================
         1. Transfer ${request.amount} ${request.token} from your wallet
         2. To crypto address: ${request.address}
         3. User balance has been automatically updated
         4. User will receive tokens on their address
         ========================================
         `);
         
           // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (—è–∫—â–æ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å)
           try {
             console.log(`üì± User ${request.userAddress} will be notified about withdrawal approval`);
           } catch (notificationError) {
             console.error('Error sending notification to user:', notificationError);
           }
         
         } catch (error) {
           console.error('‚ùå Error processing withdrawal:', error);
         }
      
    } else {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå REQUEST NOT FOUND! Invalid request ID.',
        show_alert: true
      });
    }
    
  } else if (data.startsWith('reject_')) {
    const requestId = data.replace('reject_', '');
    const request = withdrawalRequests.get(requestId);
    
    if (request) {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
      request.status = 'rejected';
      withdrawalRequests.set(requestId, request);
      
      // Update database for frontend
      await updateWithdrawalStatusInDatabase(requestId, 'rejected', request.userAddress);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå REQUEST REJECTED! Withdrawal denied.',
        show_alert: true
      });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const updatedMessage = `
üö´ *REQUEST REJECTED* üö´

üéØ *Request ID:* \`${requestId}\`
üí∞ *Token:* ${request.token}
üíé *Amount:* ${request.amount}


üè¶ *CRYPTO ADDRESS:*
\`${request.address}\`


üëë *User:* ${request.funUsername}
‚è∞ *Rejected At:* ${new Date().toLocaleString('en-US')}

*Status:* ‚ùå REJECTED
      `;
      
      await bot.editMessageText(updatedMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      });
      
      console.log(`Withdrawal rejected: ${requestId}`);
      
    } else {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '‚ùå REQUEST NOT FOUND! Invalid request ID.',
        show_alert: true
      });
    }
  }
});

// API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
app.get('/withdrawal-status/:requestId', async (req, res) => {
  const { requestId } = req.params;
  
  console.log(`üîç Checking status for request: ${requestId}`);
  
  // First check in memory
  let request = withdrawalRequests.get(requestId);
  
  if (request) {
    console.log(`‚úÖ Found request in memory: ${requestId}, status: ${request.status}`);
    res.json({
      requestId: requestId,
      status: request.status,
      token: request.token,
      amount: request.amount,
      address: request.address,
      userAddress: request.userAddress
    });
    return;
  }
  
  // If not in memory, check database
  try {
    const fs = require('fs');
    const path = require('path');
    
    // Extract user address from requestId (assuming format: WR-timestamp-counter)
    // We need to search through all user files
    const databaseDir = path.join(__dirname, '..', 'database');
    const files = fs.readdirSync(databaseDir);
    
    for (const file of files) {
      if (file.startsWith('withdrawal_requests_') && file.endsWith('.json')) {
        const filePath = path.join(databaseDir, file);
        const data = fs.readFileSync(filePath, 'utf8');
        const requests = JSON.parse(data);
        
        const foundRequest = requests.find(req => req.id === requestId);
        if (foundRequest) {
          console.log(`‚úÖ Found request in database: ${requestId}, status: ${foundRequest.status}`);
          res.json({
            requestId: requestId,
            status: foundRequest.status,
            token: foundRequest.token,
            amount: foundRequest.amount,
            address: foundRequest.address,
            userAddress: foundRequest.userAddress
          });
          return;
        }
      }
    }
    
    console.log(`‚ùå Request not found in memory or database: ${requestId}`);
    res.status(404).json({ error: 'Request not found' });
    
  } catch (error) {
    console.error('‚ùå Error checking request status:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// API endpoint –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/update-user-balance', (req, res) => {
  try {
    const { userAddress, token, amount, operation } = req.body;
    
    const fs = require('fs');
    const path = require('path');
    
    // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –±–∞–ª–∞–Ω—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const balancesFile = path.join(__dirname, '..', 'database', `user_balances_${userAddress}.json`);
    
    // –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    let userBalances = {};
    if (fs.existsSync(balancesFile)) {
      const data = fs.readFileSync(balancesFile, 'utf8');
      userBalances = JSON.parse(data);
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
    const currentBalance = parseFloat(userBalances[token] || 0);
    const changeAmount = parseFloat(amount);
    let newBalance;
    
    if (operation === 'add') {
      newBalance = currentBalance + changeAmount;
    } else if (operation === 'subtract') {
      newBalance = Math.max(0, currentBalance - changeAmount);
    } else if (operation === 'set') {
      newBalance = changeAmount;
    } else {
      return res.status(400).json({ error: 'Invalid operation' });
    }
    
    userBalances[token] = newBalance;
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    fs.writeFileSync(balancesFile, JSON.stringify(userBalances, null, 2));
    
    console.log(`‚úÖ Updated balance for user ${userAddress}: ${token} ${currentBalance} ‚Üí ${newBalance} (${operation} ${changeAmount})`);
    
    res.json({ success: true, newBalance });
    
  } catch (error) {
    console.error('‚ùå Error updating user balance:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    bot: 'running',
    timestamp: new Date().toISOString(),
    requestsInMemory: withdrawalRequests.size
  });
});

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3001;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`ü§ñ Telegram bot server running on port ${PORT}`);
  console.log(`üîó Health check: http://localhost:${PORT}/health`);
  console.log(`üì± Bot is ready! Send /start to test.`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
bot.on('error', (error) => {
  console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

module.exports = { bot, withdrawalRequests };
